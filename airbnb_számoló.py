# -*- coding: utf-8 -*-
"""Airbnb_számoló.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13PkDHpZgBB7SWfgq0w_dEtRTesDD-74D
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud, STOPWORDS
from collections import Counter
import pandas as pd
import warnings
warnings.filterwarnings('ignore')
from sklearn.preprocessing import MinMaxScaler

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/My Drive/Chillgarden/airbnb_.csv')

print(df)

df.head(10, )

df['IFA'] = 510

df.head()

# prompt: A Confirmation Code oszlop 1 indexű sorának értékét szeretném kiírtani

Billable_Confirmation_Code = df['Confirmation Code'][1]
print('Billable_Confirmation_Code:', Billable_Confirmation_Code)

# prompt: erre az értékre szeretnék rákeresni a df dataframeben, és megjelníteni a Start date oszlop egyenlő indexű értékét

# Assuming 'erre az értékre' is stored in a variable called 'target_value'
target_value = 'your_target_value'  # Replace 'your_target_value' with the actual value

# Find the index of the target value in the relevant column
try:
  index = df[df['Confirmation Code'] == target_value].index[0] #Replace 'Confirmation Code' with the correct column name if needed.

  # Print the corresponding value in the 'Start date' column
  start_date = df.loc[index, 'Start date']
  print(f"The Start date for Confirmation Code '{target_value}' is: {start_date}")
except IndexError:
  print(f"The value '{target_value}' was not found in the 'Confirmation Code' column.")

Start_date = df['Start date'][1]
print('Start_date:', Start_date)

End_date = df['End date'][1]
print('End_date:', End_date)

import pandas as pd

# Assuming 'End_date' and 'Start_date' are strings in 'MM/DD/YYYY' format
End_date = pd.to_datetime(End_date, format='%m/%d/%Y')  # Convert to datetime
Start_date = pd.to_datetime(Start_date, format='%m/%d/%Y') # Convert to datetime

Length_of_stay = [(End_date - Start_date).days]  # Calculate difference in days
print('Length_of_stay:', Length_of_stay)

# prompt: find the row index in df for HMHWN9Y2RK

import pandas as pd

# Assuming df is already loaded as in your provided code
# ... (your existing code to load the dataframe) ...

try:
    row_index = df.index[df['Confirmation Code'] == 'HMMFE44QWY'].tolist()[0]
    print(f"The row index for Confirmation Code 'HMMFE44QWY' is: {row_index}")
except IndexError:
    print("Confirmation Code 'HMMFE44QWY' not found in the DataFrame.")

print('What confirmation code you are looking for?:')

# prompt: let me able to answer this question and add the confirmation code

# ... (your existing code) ...

print('What confirmation code you are looking for?:')
confirmation_code_to_find = input()

try:
    row_index = df.index[df['Confirmation Code'] == confirmation_code_to_find].tolist()[0]
    print(f"The row index for Confirmation Code '{confirmation_code_to_find}' : {row_index}")

    start_date = df.loc[row_index, 'Start date']
    print(f"The Start date for Confirmation Code '{confirmation_code_to_find}': {start_date}")

    end_date = df.loc[row_index, 'End date']
    print(f"The End date for Confirmation Code '{confirmation_code_to_find}': {end_date}")

    end_date = pd.to_datetime(end_date, format='%m/%d/%Y')
    start_date = pd.to_datetime(start_date, format='%m/%d/%Y')
    length_of_stay = (end_date - start_date).days
    print(f"The Length of stay for Confirmation Code '{confirmation_code_to_find}': {length_of_stay}")

    Brutto_kereset = df.loc[row_index, 'Gross earnings']
    print(f"Házigazda brutto keresete azaz a Szálázandó szobaár a vedég felé '{confirmation_code_to_find}': {Brutto_kereset}")

    Airbnb_fee = df.loc[row_index, 'Service fee']
    print(f"Airbnb díj '{confirmation_code_to_find}': {Airbnb_fee}")

    Kifizetes = df.loc[row_index, 'Amount']
    print(f"Eszter ezt az utalást kapta '{confirmation_code_to_find}': {Kifizetes}")



except IndexError:
    print(f"Confirmation Code '{confirmation_code_to_find}' not found in the DataFrame.")


print('Mennyi felnőtt érkezett?:')
felnottek_szama = int(input())
print(f"A vendégek száma: {felnottek_szama}")

try:
    IFA = df.loc[row_index, 'IFA']
    total_IFA = (length_of_stay * felnottek_szama * IFA)
    print(f"total_IFA: {total_IFA} ")
except:
    pass # or handle the exception in a more specific way

Kezhez = (Brutto_kereset - Airbnb_fee - total_IFA)
print(f"Kezhez: {Kezhez}")

naponta_szamlazando_woIFA = (Brutto_kereset - total_IFA) / length_of_stay
print(f"naponta_szamlazando IFA nélkül: {naponta_szamlazando_woIFA}")

msz_szolgdij = (Kezhez * 0.3)
print(f"Magánszálláshely szolgáltatási díj - 30%: {msz_szolgdij}")

data = {
    'Confirmation Code': [confirmation_code_to_find],
    'Start Date': [start_date],
    'End Date': [end_date],
    'Éjszakák száma': [length_of_stay],
    'Vendég felé számlázandó (Brutto)': [Brutto_kereset],
    'Airbnb Fee': [Airbnb_fee],
    'Eszter ennyi utalást kapott': [Kifizetes],
    'Felnőttek száma': [felnottek_szama],
    'Total IFA': [total_IFA],
    'Ennyi marad Eszternél': [Kezhez],
    'Naponta számlázandó (ex. IFA)': [naponta_szamlazando_woIFA],
    'Üzemeltetés szolgáltatási díj 30%': [msz_szolgdij]
}

results_df = pd.DataFrame(data)
print(results_df)

results_df.head()

!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

from google.colab import drive
from google.colab import auth
from oauth2client.client import GoogleCredentials
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
import io
import pandas as pd

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# Replace 'your_folder_id' with the actual ID of your Google Drive folder
# and 'your_file_id' with the ID of your existing 'results.csv' file.
folder_id = '1Xi3Kvgl2T_bx85_2RBNqIFEKaGG5h8fp'  # Replace with your folder ID
file_id = '1Q-EFm5kOU1WYKtQkxBkbGUQdX6WZGEYw'     # Replace with your file ID

# 1. Download the existing file
file = drive.CreateFile({'id': file_id})
file.GetContentFile('results.csv')

# 2. Read the existing CSV into a DataFrame
existing_df = pd.read_csv('results.csv')

# 3. Create a DataFrame for the new row
new_row_df = pd.DataFrame(data)  # 'data' is your dictionary for the new row

# 4. Append the new row to the existing DataFrame
updated_df = pd.concat([existing_df, new_row_df], ignore_index=True)

# 5. Upload the updated DataFrame back to Google Drive
# Option 1: Overwrite the existing file:
# updated_df.to_csv('results.csv', index=False)
# file.SetContentFile('results.csv')
# file.Upload()
# print(f"File updated in Google Drive with ID: {file_id}")

# Option 2: Upload as a new file (optional):
# file_metadata = {
#     'title': 'results_updated.csv',
#     'parents': [{'id': folder_id}]
# }
# file = drive.CreateFile(file_metadata)
# file.SetContentString(updated_df.to_csv(index=False))
# file.Upload()
# print(f"New file uploaded to Google Drive with ID: {file.get('id')}")

# Option 3: Use io to upload: (Recommended for avoiding temp files)
output = io.StringIO()
updated_df.to_csv(output, index=False)  # Write to StringIO
output.seek(0)  # Rewind to the beginning of the data
file.SetContentString(output.getvalue())
file.Upload()
print(f"File updated in Google Drive with ID: {file_id}")

!pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

from google.colab import drive
from google.colab import auth
from oauth2client.client import GoogleCredentials
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

# 1. Replace 'Chillgarden' with the actual ID of your Google Drive folder
# You can find the ID in the URL of the folder when you open it in Google Drive.
# It should look something like this: '1abcDEFGhijKLMnOpqRSTUVwxyz'
folder_id = '1Xi3Kvgl2T_bx85_2RBNqIFEKaGG5h8fp'  # Replace with your folder ID


# Create file metadata.
file_metadata = {
    'title': 'results.csv',
    'parents': [{'id': folder_id}] # 2. Change 'folder_id' to 'id'
    }
# Create the file on Google Drive.
file = drive.CreateFile(file_metadata)
# Save the DataFrame to a local CSV file
results_df.to_csv('results.csv', index=False) # 3. save the dataframe to a file
file.SetContentFile('results.csv')  # Set content from local file
file.Upload()


print(f"File uploaded to Google Drive folder with ID: {folder_id}")